<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"

       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
           " default-autowire="no">


    <!--这是spring mvc的配置文件-->


    <!--这是用来识别bean的-->
    <context:component-scan base-package="com.personal.web"></context:component-scan>


    <!--这是一个处理器映射器！！！这是一个handler，，用于查找自己写的Controller，handler就是Controller
    它是根据bean的name去查找-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>


    <!--这个很常用。这是一个处理器映射器，有了它，注解就可以用了，结合注解来用，它可以查找到有那个注解的controller-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>-->

    <!--这个很常用。适配器，完成注解式，它执行controller who带有那个注解的-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>-->


    <!--spring MVC注解式访问servlet，只需这样配置
    -> 只需提供一个urlPatterns即可访问servlet（请求映射）
    这样会自动配置RequestMappingHandlerMapping和RequestMappingHandlerAdapter

    这样 -> 适配器调用转换器时会应用自己写的转换器
    校验器
    json相关-->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>


    <!--拦截器相关
    拦截控制器；而过滤器拦截url包括jsp-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--所有-->
            <mvc:mapping path="/**"/>
            <bean class="com.personal.web.interceptor.LogInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--当作静态资源，不经过spring mvc-->
    <mvc:resources mapping="/js/" location="/js/**"></mvc:resources>
    <!--<mvc:resources mapping="/html/" location="/html/**"></mvc:resources>-->


    <!--这也是一个handler，这是一个处理器映射器，用于查找自己写的Controller，handler就是Controller
    它是根据bean的id去查找
    -->
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <props>
                <prop key="/item1.action">helloController</prop>
                <prop key="/item2.action">helloController</prop>
                <prop key="/test.action">testController</prop>
            </props>
        </property>
    </bean>

    <!--注入-->
    <!--<bean name="/hello.action" class="com.personal.web.controller.HelloController"></bean>-->
    <bean id="helloController" class="com.personal.web.controller.HelloController"></bean>

    <!--这是一个处理器适配器！！！它是用来执行controller的。这样仅可以执行所有实现了controller接口的controller-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>

    <bean id="testController" class="com.personal.web.controller.TestController"></bean>

    <!--这是一个处理器适配器。它是用来执行controller的。这样可以执行实现了HttpRequestHandler接口的controller-->
    <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>


    <!--配置视图解析器
    一旦配置视图解析器了，正常的跳转都必须经过视图解析器
    配不配置都行，页面有的不需要保密-->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
        <!--<property name="prefix">-->
            <!--&lt;!&ndash;在这个目录里找&ndash;&gt;-->
            <!--<value>/WEB-INF/jsp/</value>-->
        <!--</property>-->
        <!--<property name="suffix">-->
            <!--&lt;!&ndash;找后缀是这个的&ndash;&gt;-->
            <!--<value>.jsp</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--转换器相关
    向spring工厂所有转换器里注入了一个自己写的转换器，
    还得告诉适配器应用这个自己写的转换器-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.personal.web.converter.DateConverter"></bean>
            </list>
        </property>
    </bean>


    <!--校验器相关配置，采用注解方式校验
    这是校验器需要的文件的位置-->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!--校验文件-->
                <value>info</value>
            </list>
        </property>
        <property name="fileEncodings">
            <value>utf-8</value>
        </property>
        <property name="cacheSeconds">
            <value>120</value>
        </property>
    </bean>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!--配置校验器-->
        <property name="providerClass">
            <value>org.hibernate.validator.HibernateValidator</value>
        </property>
        <!--配置资源文件
        也就是校验文件

        这必须是ref-->
        <property name="validationMessageSource" ref="messageSource">
        </property>
    </bean>



    <!--异常处理相关-->
    <bean class="com.personal.exception.CustomExceptionResolver"></bean>

    <!--文件上传相关
    上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <!--单位字节-->
            <value>5242880</value>
        </property>
    </bean>
    
    <!--全局跨域-->
    <mvc:cors>
        <!--只允许该域名/ip/主站跨域访问我（我是一个服务器应用），的所有路径
        http://127.0.0.1:8020/son3/nuser.jsp 这可以！
        -->
        <mvc:mapping path="/**" allowed-origins="http://127.0.0.1:8020"/>
        <!--<mvc:mapping path="/html/**" allowed-origins="http://127.0.0.1:8020"/>-->
    </mvc:cors>
</beans>